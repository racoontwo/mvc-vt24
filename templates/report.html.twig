{% extends "base.html.twig" %}

{% block title %}About{% endblock %}

{% block body %}
    <div class="grid-container">
        <div class="left-column">
            <h1 id="kmom01">Kmom01</h1>
            <p>Mina förkunskaper är grundade i det som vi har lärt oss från tidigare kurser i Webbprogrammering distans, dvs det från JavaScript och Objectorienterad Python.</p>
            <p>Det är en liten tröskel i att börja lära sig arbeta objectorienterat upplever jag, 
            men när man väl kommer in i det så är det ett logiskt och effektivt arbetssätt.
            Inför den här kursen så känner jag mig hyfsat bekväm att jobba objektorienterat 
            men det kommer troligtvis (och förhoppningsvis) vara en del man behöver lära sig.</p>
            <p>För PHPs modell för klasser och objekt så arbetar man med ett objekt som man skapar med en klass. Varje objekt är en instans av klassen och har vissa egenskaper (propertires).</p>
            <p>Ett objekt kan vara en stol, en bil, en person, allt möjligt, och de fungerar på olika sätt.</p>
            <p>I objektklassen finns även metoder (funktioner) som man kan anropa. Metoderna tillhör objektet och är klasspecifika.</p>
            <p>Kodbasen som användes för me/report blir som grunden för en hemsida där man kan samla olika funktioner på hemsidan på olika ställen</p>
            <p>När man sen använder "npm run build" så bygger den hemsidans struktur utifrån de parametrar som getts</p>
            
            <p>
            Parametrarna är indelade i tre stora kategorier.
            Model förmedlar datan till hemsidan och kommunicerar med View och Controller, men är inte lika beroende utav dem.
            View blir template-filerna bland annat i denna struktur, och utgörs av hur sidan ser ut snarare än hur den fungerar.
            Controller är PHP-filerna (eller filen) som innehåller olika routes och tar emot information från den som använder hemsidan.
            </p>
            
            <p>
            Från artikeln: "The Right Way", så var det intressant att läsa att PHP fungerar med rekursion men mest fokuserar på iteration. 
            Jag undrar vad som är fördelarna med respektive, då eftersom vi fokuserade en stor del på rekursion i objektorienterade Pythonkursen.
            Det ska bli intressant att lära sig om skillnader i sättet att arbeta mellan två objektorienterade språk.
            </p>

            <p>TIL för detta momentet var att instsallera Symfony och att få identifiera de mer centrala delarna i ramverket,
            alltså, de delar som man arbetar mest med. Har också lärt mig att felsöka routrar i Terminalen!</p>
            <p></p>

            <h1 id="kmom02">Kmom02</h1>
            <p>Man börjar få en större överblick av hur ramverket håller ihop en applikation och vi har testat lite andra funktioner och andra controllers i detta kursmoment. 
                Det man har fått upp ögonen för i det här momentet är att man nu kan bygga på olika applikationer utifrån samma MVC-ramverk och struktur som vi har jobbat med. 
                Vi börjar skapa oss ett skelett, en struktur, en stomme, en husgrund där vi undersöker hur el vatten och avlopp rör sig, 
                för att sedan kunna bygga flera olika hus i alla dess storlekar och sorter.</p>
            <p>
                De objektorienterade konstruktionerna arv, komposition, interface och trait fungerar som följande:
            </p>
            <p>
                Arv objektorienterad programmering använder man klasser för att ”bygga upp” sin kod och där fyller arv funktionen, 
                att man kan bygga vidare på att en klass utan att behöva om själva grundklassen och man kan då återanvända kod som finns i grundklassen till det den klassen som ärver. 
                En viktig distinktion är att klasser som ärver inte kan existera utan den kod som de ärver ifrån.
            </p>
            <p>
                Komposition är när en klass använder en annan klass men där den första klassen fortfarande kan existera utan den klassen som den använder kompositionsmässigt.
            </p>
            <p>
                Interface är ett ”löfte” om att en klass kommer behöva använda alla funktionen som finns i interfacet och får ett felmeddelande om detta krav ej uppfylls.
            </p>
            <p>
                Trait är som ett löst arv, den utgör bara olika funktioner eller attribut som kan återanvändas, men som inte är beroende på samma sätt som arv och komposition.
            </p>
            <p> 
                Jag löste uppgiften genom att först göra en controller för Cards, där jag lånade skelettet från Pig-övningen och gjorde om vissa delar, 
                bland annat strukturen på kort-klassen som behövde ha ett value och en suit. 
                Suit sparade jag som ett trait, för det var något som jag visste kommer användas om och om igen. 
            </p>
            <p>
                Jag hoppade över att spara allt i session för det jag mycket problem med det, bland annat hur jag skulle radera sessionen och som jag inte hittade något exempel av i pig-övningen, så det gick åt mycket tid åt att leta efter det. Istället hårdkodade jag in data för kortens värde och utgick från det. Sen skapade jag en till kontroller för JSON-api: och skapade routerna med det. Satt länge och förstod inte varför inte POST-fungerade tills jag såg att man behövde ett formulär för det och då löste jag det och sen fungerade det. Ibland lär man sig den hårda vägen :) 
                Nu tog det väldigt mycket tid att hitta lösningar för allting så det som är klart är i det enklaste fallet, men jag var i alla fall nöjd med att det fungerar så pass bra. Förbättringspotential skulle kunna vara för hur man hanterar session och ha det mer strukturerat, kanske i en egen funktion i deck-klassen, nu var det lite spretigt. Och man kan också rensa bort många funktioner och kod som jag inte använde i slutändan. 
                Så här långt med Symfony är det ett välstrukturerat och logiskt sätt att jobba med olika vyer, controllers och models. Just så här i början är det spretigt, det känns som ett ramverk som har relativt hög tröskel att komma in i men som man ser potentialen med att skapa program. Det är skillnad på det som visas i json-strukturen och det som sparas i Session, och det skulle man kunna förbättra för tydlighetens skull med några funktioner så man lättare kan spara bägge i samma struktur. 
            </p>
            <p>
                TIL för detta moment var nog mycket hur API:er fungerar och hur man strukturerar upp det som vi gjorde i kontrollerna. Det är TIL, och så att POST-metoder måste ha formulär. 
            </p>
            
        </div>
        <div class="right-column">
            <a href="{{ path('report') }}#kmom01">Kmom01</a>
            <a href="{{ path('report') }}#kmom02">Kmom02</a>
            <a href="{{ path('report') }}#kmom03">Kmom03</a>
            <a href="{{ path('report') }}#kmom04">Kmom04</a>
            <a href="{{ path('report') }}#kmom05">Kmom05</a>
            <a href="{{ path('report') }}#kmom06">Kmom06</a>
            <a href="{{ path('report') }}#kmom07">Kmom07</a>
        </div>
    </div>
{% endblock %}
