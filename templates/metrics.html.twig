{% extends "base2.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block main %}


<h1>Metrics</h1>

<p>
    Här kommer ett stycke om hur man kan jobba med kodvalitet, Clean code.
    Jag börjar med en rubrik "Introduktion" och förklarar de sex C:na och hur de kan påverka kodens kvalitet.
</p>

<h3>
    Introduktion
</h3>

<p>
    De sex C:na består av:
    Codestyle,
    Coverage,
    Complexity,
    Cohesion,
    Coupling,
    CRAP score.
</p>

<h4>
    Codestyle
</h4>
<p>
    Alla gillar vi kod som är enkel att läsa, felsöka och hantera. Hur koden är skriven
    har också påverkan på kodens kvalitet. Vi behöver fundera över hur "stora" vi skriver
    olika "code snippets" eftersom storlek har påverkan på kodens kvalitet.
    En metod eller klass som exempelvis innehåller väldigt mycked kod blir jobbigare att hantera och felsöka.
    Att skriva metoder och klasser så att de är så lätta som möjligt att felsöka, 
    dvs med få rader kod, är alltså en bra utgångspunkt. Ju större en klass eller en metod är, 
    desto svårare bllir den att utveckla och underhålla.
</p>


<h4>
    Coverage
</h4>

<p>Högre kodtäckning kan betyda att koden är väl testad, men det behöver inte göra det.
    Vad man kan utgå ifrån är att en högre kodtäckning minimerar risken för buggar.
</p>
<p>
    Nedan kan vi se ett exempel på hur kodens Rating är hög, A, men att den saknar Test Coverage i vissa fall, som i sin tur drar ned kodens kvalitet.
</p>

<a href="{{ asset('img/coverage.png') }}" class="image-link">
    <img src="{{ asset('img/coverage.png') }}" alt="">
</a>

<h4>
    Cyclomatic complexity
</h4>
<p>
    Indikerar hur komplext ett program är.
    CC mäter antalet beslutspunkter, tänk if-satser, där fler beslutspunkter blir
    mer komplext = generellt sämre kod. 
    Om man tänker i banor av tester så blir kod med CC:1 lätta att testa, då de endast har ett testfall,
    men där kod med CC:30 har 30 olika utfall och blir därför svårare att testa.
</p>

<h4>
    Cohesion
</h4>
<p>
    Gör en feature och ingenting annat. En kombination med low couppling och high cohesion är bra kod.
    På ett sätt så är cohesion ett mått på hur väl sammanhållna metoder och klasser är, att de fyller ett 
    syfte och inget annat. 
    På samma sätt som övriga C:n så är low cohesion-kod, alltså ett lågt mätvärde, tecken på 
    kod som är svår att testa, underhålla och utveckla. 
</p>

<h4>
    Coupling
</h4>
<p>
    Har att göra med hur många beroenden har en klass till andra klasser.
    Här är det bra att förhålla sig till så "fristående" klasser som möjligt. 
    Det blir lättare att jobba med denna typer av klasser när man exempelvis ska testa eller leta buggar.
    Tätare koppling mellan olika klasser gör det svårare att jobba och underhålla, till exempel
    inom testning då man inte vet vilken klass som är orsak om något går fel, exempelvis.
</p>

<h4>
    CRAP score
</h4>
<p>
    CRAP score är som en mix av ovan, hur vältestad koden är.
    CRAP score sammanställer kodens kvalitet utifrån olika parametrar och
    man får ett värde att utgå ifrån. 
</p>

<h3>
    Phpmetrics
</h3>

<p>
    1 - Tittar man i PhpMetrics så kan jag se att jag har 9 violations i min kod. 
    Jag utgår från dessa och identifierar att det finns förbättringspotential för vissa områden i min kod.
</p>

<a href="{{ asset('img/coverage.png') }}" class="image-link">
    <img src="{{ asset('img/coverage.png') }}" alt="">
</a>

<p>
    2 - Tittar jag under Unit Testing så får jag fram vilka klasser som aldrig blivit testade.
    Vissa av dessa är resultatet av ett medvetet val, men andra kan jag kanske se över om det finns
    behov av bredda min testning lite.
</p>

<p>
    3 - Tittar man vidare under Object oriented metrics så kan man också se att vissa routes/metoder har hög volym, 
    och dessa kanske man skulle kunna se över.
</p>

<a href="{{ asset('img/metrics_volume.png') }}" class="image-link">
    <img src="{{ asset('img/metrics_volume.png') }}" alt="">
</a>

<h3>
    Scutinizer
</h3>

<p>
    Analysera Scrutinizer rapport för min kod.
    Utifrån rapporten i Scrutinizer kan jag se ett behov som är större än andra
    och det är coverage som är på 30%. I stort har koden bra kvalitet enligt Scrutinizers
    egna betyg, 9,97, men kan jag öka coverage så kommer det göra störst skillnad. 
    Under Issues finns det även buggar och best practice som jag kan organisera min kod utefter för att förbättra kvaliteten.
    Kollar man vidare under Hot Spots så är resultaten ändå hyfsat högt, där den sämst betygsatta operationen får ett B, resten har A.
    Återigen så lyser coverage med sin frånvaro där det finns utrymme för förbättring.
    En annan del som kan ge stor effekt i att förbättra kodens kvalitet är att lösa de buggar som 
    finns rapporterade under Issues. 
</p>

<p>
    Kopplat till de 6 C:na så kan man även se, utöver Coverage, att det finns viss förbättringspotential med CRAP score för vissa metoder och klasser.
    Tittar man under Code och sorterar efter komplexitet så ser man även att det finns vissa klasser med hög komplexitet. 
    Jag vill minnas för att det finns många åtgärder och beslutspunkter i dessa klasser, men kan ändå vara någonting som man kan se över.
    Även om man inte ändrar någonting i koden så kan det vara bra att förstå varför en viss klass har ett högt värde. 
    Utöver dessa värden är också comprehensability intressant att undersöka, och finns under Issues/Labels. 
</p>


<a href="https://scrutinizer-ci.com/g/racoontwo/mvc-vt24/" class="image-link">
    <img src="https://scrutinizer-ci.com/g/racoontwo/mvc-vt24/badges/quality-score.png?b=main" alt="Quality Score">
</a>
<a href="https://scrutinizer-ci.com/g/racoontwo/mvc-vt24/" class="image-link">
    <img src="https://scrutinizer-ci.com/g/racoontwo/mvc-vt24/badges/coverage.png?b=main" alt="Coverage">
</a>
<a href="https://scrutinizer-ci.com/g/racoontwo/mvc-vt24/" class="image-link">
    <img src="https://scrutinizer-ci.com/g/racoontwo/mvc-vt24/badges/build.png?b=main" alt="Build Status">
</a>

<h3>
    Förbättringar
</h3>

<p>
    Välj minst 3 förbättringar som jag vill göra med min kod. (Gärna fler)
    Exempel kan vara fixa issues, öka kodtäckning, fokusera på kvalitetsindex, minska komplexitet.
</p>

<p>
    1 - Få upp kodtäckningen från 30%. Målet är 100% men jag lämnar utrymme för om det blir för komplext/tar för mycket tid.
</p>

<p>
    2 - Fixa de Issues som finns, om än inte alla, i alla fall de flesta.
</p>

<p>
    3 - Ta bort unused code och förbättra strukturen där det finns möjlighet.
</p>

<p>
    Jag börjar med att lösa de issues som finns, en efter en, och försöker beta av dem successivt så att antalet går ner.
    Min tanke är att jag om jag löser dessa problem innan jag skriver coverage för dem så kommer jag inte skriva coverage
    för kod som jag eventuellt tar bort eller kanske inte behöver, alltså i onödan.
    Anledningen till att jag sen väljer att förbättra coverage är för att det finns stor förbättringspotential för den delen.
    Jag tänker att genom att öka antalet tester för koden så kan jag också komma åt att få ner CRAP scoren på de ställen där den är hög,
    eftersom CRAP score är en slags sammanställning för hur stor koddelen är och hur testad den är.
    Betyget för koden enligt Scrutinizer är redan högt, men coverage är lågt, så det säger sig självt att det är där man ska lägga krutet.
    Issues är samma sak där, kodkvaliteten är god men det finns en del issues man kan ta itu med för att förbättra kvaliteten ytterligare.
</p>


<h3>
    Analys och Diskussion
</h3>

<p>
Efter att börjat gå igenom coverage upptäckte jag, efter mycket ledande och testande, att mycket förbättringspotential låg i Controller-klasserna.
Eftersom detta är något som vi ännu inte gått igenom så beslöt jag mig efter många misslyckade försök att lämna de delar av coverage jag inte kunde lösa åt sidan.
Istället fokuserade jag på att göra den coverage som jag hade kunskap om och lyckades få upp coverage från 29% till 36%.
En lärdom från detta är att det finns ytterligare anledning till att ha så lite kod i controllern som möjligt, då blir det lättare att få högre coverage och
istället för att testa controllern så kan man testa klasserna där funktionaliteten finns.
</p>
<p>
Samtidigt så rensade jag de issues som fanns och kunde få bort en del onödig kod och också skriva mer clean code på de ställen som det behövdes och var relativt enkelt att städa.
</p>
<p>
Eftersom testresultatet från början hade högt betyg så var det inte lika intressant att höja det som det var att försöka öka kodtäckningen.
Det visade sig dock att kodtäckningen var sammanlänkat med test av controllers, något som vi inte har gått igenom, så jag fick helt enkelt lämna det och fokusera på det som gick att implementera.
</p>

<p>
Eftersom Scrutinizer är uppkopplat till Github så kan man jobba kontinuerligt och aktivt med att städa upp koden. Scrutinizer kör testerna och skapar kontinuerligt rapporter som visar vad man kan förbättra.
Nackdelarna som jag har märkt är att ibland så kan man börja städa koden på ett ställe och då leder det till att andra saker slutar att fungera. Det finns även risk för att man
bara sitter och städar upp koden. Men allt som allt är fördelarna många fler. Det blir tydligare att läsa koden, lättare att se för andra hur projektet är uppbyggt, lättare att identifiera var i projektet det finns störst
förbättringspotential osv. 
</p>


{% endblock %}